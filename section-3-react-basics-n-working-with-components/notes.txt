// tutorial 30
react app starts from index.js

react-dom exports some react dom object and import in index.js

index.html is the only html file which is used in react project. Single page application.

createRoot defines the root of the react app

<App /> -> JSX Syntax
return (<div><h2>HI</h2></div>) -> JSX
// tutorial 30

// tutorial 31
JSX = JavaScript XML

// tutorial 32
component is just html element

// tutorial 33
custom component must start with an uppercase character

// tutorial 34
must have one root element here per return statement or per JSX code snippet.

return <div>Date</div><div><h2>Title</h2><div>Amount</div></div>

here, there are two root element(two div)

// tutorial 37
props passes data
props means, properties

// tutorial 40
Wrapper component - props.children

// tutorial 42
JSX is syntactic sugar
it is transformed to methods called on this react object, that is why needed to import react in every single component 

return React.createElement(
    'div', 
    {}, 
    React.createElement('h2', {}, "Hi"),
    React.createElement(Expenses, {items: expenses})
);



// Section 4

// tutorial 47
in jsx, "on" is a special props.

// tutorial 48
state

// tutorial 49 very important
useState is a react hook
it should always be called inside of the component
also id doesn't work in any nested function, works only directly in the component

useState always returns array, with exactly two elements
useState uses array destructuring technique
name of the variable which contains the value
function name, the function which will update the value
both of the names are up to me

useState calls the component again when the state(value) changes

if you console.log right after change the state, you will get the old value because the new value is not available yet

// tutorial 50
four separate instance for four ExpenseItem
every ExpenseItem has their own state

if you console.log in the component, at first load, there will be four console.log

if you change one value, there will be one single console log

// tutorial 53
onChange which triggers every keystroke
in onChange prop, react will make sure or browser will make sure that we get the event object when changes occurs

// tutorial 55
if you manage one single state and use it, make sure that other pieces of data doesn't get lost. use spread operator.

// tutorial 56
React schedules state updates, not instantly.

setUserInput({
    ...userInput,
    enteredTitle: event.target.value
});

if we use this, we might target outdated/incorrect state snapshot

setUserInput((prevState) => {
    return { ...prevState, enteredTitle: event.target.value }
});

it will always get latest state snapshot