// tutorial 110

useEffect hook calls with two arguments with two parameters

first argument is a function that should be executed after every component evalutation
if the specified dependencies changed

and the specified dependencies are the second argument that you pass in

thats an array full of dependencies
and whenever such a dependencies changes that the first function will re run 

therefore in the first function you can put any side effect code and that code will only execute 
when the dependencies specified by you changed and not when the component re renders

// tutorial 111
Uncaught Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.

for solution we need useEffect

// tutorial 113
check after user stops typing. for example after 500 miliseconds.
it is called debouncing

you can return from useEffect. but you can return functions only -> cleanup function

// tutorial 116
when you update a state depending on another state, useReducer is always a good choice

// tutorial 117
const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn)
state is the latest snapshot of the state
dispatchFn dispatches an action for update the state
dispatch action consumed by first argument of useReducer -> reducerFn
set initial state
initial function

here reducer function was created outside of the component because it doesnot need any data generated from the component

dispatchEmail parameter can be anything like string, number, object

// tutorial 118
useEffect + useReducer

// tutorial 122

authContext is an object which contains a component

in JSX we need component

authContext.Provider is component

after wrapping this, all inside it has access to authContext.Provider

how to listen it: authContext.Consumer

// tutorial 123

instead of authContext.Consumer, use useContext hook